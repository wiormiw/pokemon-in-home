services:
  app:
    build:
      context: ../../../../
      dockerfile: src/main/resources/docker/Dockerfile
    ports:
      - "8080:8080"
      - "9000:9000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - QUARKUS_DATASOURCE_JDBC_URL=jdbc:postgresql://postgres:5432/pokemon
      - QUARKUS_DATASOURCE_USERNAME=admin
      - QUARKUS_DATASOURCE_PASSWORD=password
      - QUARKUS_REDIS_HOSTS=redis://redis:6379
      - QUARKUS_GRPC_SERVER_PORT=9000
      - QUARKUS_MICROMETER_EXPORT_PROMETHEUS_ENABLED=true
      - QUARKUS_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://otel-collector:4317
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - quarkus-network

  postgres:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=pokemon
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d pokemon"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - quarkus-network

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - quarkus-network

  jaeger:
    image: jaegertracing/all-in-one:1.58
    ports:
      - "16686:16686"  # Jaeger UI
      - "14250:14250"  # Jaeger gRPC endpoint for receiving traces
      - "14268:14268"  # Jaeger HTTP endpoint
      - "14269:14269"  # Jaeger metrics endpoint
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:14268/" ]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - quarkus-network

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.100.0
    command: ["--config=/etc/otel-collector-config.yml"]
    ports:
      - "4317:4317"
      - "13133:13133"  # Health check port
      - "8889:8889"    # Metrics endpoint
    volumes:
      - ./otel-collector-config.yml:/etc/otel-collector-config.yml
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:13133"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      jaeger:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - quarkus-network

  prometheus:
    image: prom/prometheus:v2.51.0
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      otel-collector:
        condition: service_healthy
    networks:
      - quarkus-network

  grafana:
    image: grafana/grafana:10.4.0
    ports:
      - "3000:3000"
    depends_on:
      prometheus:
        condition: service_healthy
    environment:
      - GF_PATHS_LOGS=/var/log/grafana
      - GF_PATHS_PLUGINS=/var/lib/grafana/plugins
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - quarkus-network

networks:
  quarkus-network:
    driver: bridge

volumes:
  postgres-data:
  grafana-data: